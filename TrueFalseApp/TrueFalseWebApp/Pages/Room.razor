@page "/multiplayer/{RoomCode}"
@inject NavigationManager Navigation
@inject HubConnection HubConnection
@inject ISnackbar Snackbar
@implements IAsyncDisposable
@using System.Text.Json
@using System.Threading.Channels
@using Microsoft.AspNetCore.SignalR
@using Microsoft.AspNetCore.SignalR.Client
@using TrueFalseWebApp.Models
@using TrueFalseWebApp.Shared
@inject TelegramInitData TelegramInitData

<MudContainer MaxWidth="MaxWidth.Large" Class="d-flex flex-column align-center justify-center" Style="height: 100vh;">
    @if (currentView is GameView.Loading or GameView.Reconnecting)
    {
        <MudStack Class="align-center">
            <MudProgressCircular Indeterminate="true" Color="Color.Primary" Size="Size.Large" Class="my-4" />
            <MudText Typo="Typo.subtitle2">Loading room...</MudText>
        </MudStack>
    }
    else if (currentView == GameView.NotStarted)
    {
        <MudStack Class="align-center">

            <MudText Typo="Typo.subtitle2">Players in the room:</MudText>
            <MudList T="string">
                @foreach (var player in currentPlayersInfo.Players.Values)
                {
                    <MudListItem>
                        <MudText>@player.PlayerName</MudText>
                    </MudListItem>
                }
            </MudList>
            @if (isHost && currentPlayersInfo.Players.Count >= 1)// its 1 for now but should be 2
            {
                <MudButton Variant="Variant.Filled" Class="mud-theme-primary mt-4" OnClick="StartGame">
                    Start Game
                </MudButton>
            }
            else
            {
                <MudText Typo="Typo.subtitle2" Class="mt-2">
                    Waiting for the host to start the game...
                </MudText>
            }
        </MudStack>

    }
    else if (currentView == GameView.InProgress)
    {
        <MudPaper Class="pa-4 mb-4 w-100" FullWidth Elevation="2">
            <MudText Typo="Typo.h6" Class="d-flex justify-center align-center" FullWidth="true">
                @currentRoomState.CurrentRound.RoundQuestion.Text
            </MudText>
        </MudPaper>
        <MudStack Row="true" Spacing="2">
            <MudButton Variant="Variant.Filled" Class="@($"{buttonTrueClass} flex-grow-1")" FullWidth Color="Color.Primary"
                OnClick="@(() => SendAnswer(true))">True</MudButton>
            <MudButton Variant="Variant.Filled" Class="@($"{buttonFalseClass} flex-grow-1")" FullWidth Color="Color.Primary"
                OnClick="@(() => SendAnswer(false))">False</MudButton>
        </MudStack>
    }
    else if (currentView == GameView.Results)
    {
        <MudText Typo="Typo.h4" Class="mb-2">Game Over!</MudText>
        <MudText Typo="Typo.h6">Final Scores</MudText>
        <MudList T="string">
            @foreach (var row in currentPlayersInfo.Players.Values.OrderByDescending(p => p.Score).Select((value, index) =>
                    new { value, index = index + 1 }))
            {
                <MudListItem>
                    <MudText>@row.index. @row.value.PlayerName @row.value.Score</MudText>
                </MudListItem>
            }
        </MudList>
        @if (isHost)
        {
            <MudButton Variant="Variant.Filled" Class="mud-theme-primary mt-4" OnClick="StartGame">
                Play Again
            </MudButton>
        }
    }
    <MudIconButton Icon="@Icons.Material.Filled.Home" Title="Home" Size="Size.Large" Color="Color.Inherit"
        Style="position: absolute; bottom: 16px; left: 16px; cursor: pointer;"
        OnClick="@(() => Navigation.NavigateTo("/"))" />
</MudContainer>

@code {
    [Parameter]
    public string RoomCode { get; set; }

    private enum GameView { Loading, NotStarted, InProgress, Results, Reconnecting };
    private GameView currentView = GameView.Loading;
    private RoomState currentRoomState = RoomState.Empty;
    private PlayersInfo currentPlayersInfo = PlayersInfo.Empty;
    private Channel<string> stateUpdates = Channel.CreateUnbounded<string>();
    private Channel<string> playersUpdates = Channel.CreateUnbounded<string>();
    private bool isHost = false;
    private string buttonTrueClass = "";
    private string buttonFalseClass = "";
    private bool midRound = false;

    protected override async Task OnInitializedAsync()
    {
        _ = Task.Run(ProcessRoomStateUpdates);
        _ = Task.Run(ProcessPlayersUpdates);
        HubConnection.Reconnecting += error =>
        {
            Snackbar.Add("Connection lost. Reconnecting to the room...", Severity.Warning);
            StateHasChanged();
            return Task.CompletedTask;
        };
        HubConnection.Closed += async error =>
        {
            currentView = GameView.Reconnecting;
            Snackbar.Add("Could not reconnect to the room. Exiting...", Severity.Error);
            Navigation.NavigateTo("/");
            StateHasChanged();
        };
        HubConnection.On<string>("state", async (roomStateJson) =>
        {
            await stateUpdates.Writer.WriteAsync(roomStateJson);
        });
        HubConnection.On<string>("players", async (playersInfoJson) =>
        {
            await playersUpdates.Writer.WriteAsync(playersInfoJson);
        });
        await InitializeConnection();
        @* try
        {
            await HubConnection.StartAsync();

        }
        catch (Exception ex) when (ex is
        InvalidOperationException
        or HubException
        or HttpRequestException
        or TimeoutException)
        {
            currentView = GameView.Reconnecting;
            Snackbar.Add($"Failed to connect to the room. Trying again...", Severity.Error);
            StateHasChanged();
            return;
        }
        try
        {
            HubOperationResult joinRoomResponse = await HubConnection.InvokeAsync<HubOperationResult>("JoinRoom", RoomCode);
            Console.WriteLine($"JoinRoom response: {System.Text.Json.JsonSerializer.Serialize(joinRoomResponse)}");
            if (!joinRoomResponse.Ok)
            {
                currentView = GameView.Reconnecting;
                Snackbar.Add($"Failed to join the room.", Severity.Error);
                StateHasChanged();
            }
        }
        catch (Exception ex) when (ex is
        InvalidOperationException
        or HubException
        or HttpRequestException
        or TimeoutException)
        {
            Snackbar.Add($"Failed to join the room. It may not exist or is full.", Severity.Error);
            Console.WriteLine($"Failed to join room: {ex.Message}");
        }
        try
        {
            string username = TelegramInitData.InitDataUnsafe?.User?.Username ?? "Player" + new Random().Next(1000, 9999);
            HubOperationResult setNameResponse = await HubConnection.InvokeAsync<HubOperationResult>("SetName", RoomCode, username);
            if (!setNameResponse.Ok)
            {
                Snackbar.Add($"Failed to set your name in the room. Using a default name.", Severity.Warning);
            }
        }
        catch (Exception ex) when (ex is
        InvalidOperationException
        or HubException
        or HttpRequestException
        or TimeoutException)
        {
            Snackbar.Add($"Failed to set your name in the room.", Severity.Error);
        }
        currentView = GameView.NotStarted;
        Snackbar.Add("Successfully joined the room!", Severity.Success);
        StateHasChanged(); *@
        await base.OnInitializedAsync();
    }

    private async Task InitializeConnection()
    {
        int baseDelayMs = 2000;
        for (int i = 0; i < 5; i++)
        {
            try
            {
                await HubConnection.StartAsync();
                HubOperationResult joinRoomResponse = await HubConnection.InvokeAsync<HubOperationResult>("JoinRoom", RoomCode);
                if (!joinRoomResponse.Ok)
                {
                    Snackbar.Add($"Failed to join the room. {joinRoomResponse.Message}", Severity.Error);
                    break;
                }
                string username = TelegramInitData.InitDataUnsafe?.User?.Username ?? "Player" + new Random().Next(1000, 9999);
                HubOperationResult setNameResponse = await HubConnection.InvokeAsync<HubOperationResult>("SetName", RoomCode, username);
                if (!setNameResponse.Ok)
                {
                    Snackbar.Add($"Failed to set your name in the room. Defaulting to {username}", Severity.Warning);
                }
                currentView = GameView.NotStarted;
                Snackbar.Add("Successfully joined the room!", Severity.Success);
                StateHasChanged();
                return;
            }
            catch (Exception ex) when (ex is HttpRequestException or TimeoutException)
            {
                Snackbar.Add($"Network error while initializing room. Retrying... ({ex.Message})", Severity.Warning);
                if (HubConnection.State == HubConnectionState.Connected)
                {
                    await HubConnection.StopAsync();
                }
                await Task.Delay(baseDelayMs * (i + 1));
                continue;
            }
            catch (HubException ex)
            {
                Snackbar.Add($"Room initialization rejected by the server: {ex.Message}", Severity.Error);
                break;
            }
            catch (HttpRequestException ex) when (ex.StatusCode is System.Net.HttpStatusCode.Unauthorized or
            System.Net.HttpStatusCode.Forbidden)
            {
                Snackbar.Add($"Authorization error: {ex.Message}", Severity.Error);
                break;
            }
            catch (InvalidOperationException ex)
            {
                Snackbar.Add($"Invalid operation while initializing connection: {ex.Message}", Severity.Error);
                break;
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Unexpected error: {ex.Message}", Severity.Error);
                break;
            }
        }
        Navigation.NavigateTo("/");
    }

    public async ValueTask DisposeAsync()
    {
        if (HubConnection is not null)
        {
            await HubConnection.StopAsync();
            await HubConnection.DisposeAsync();
        }
    }

    private async Task ProcessRoomStateUpdates()
    {
        await foreach (var update in stateUpdates.Reader.ReadAllAsync())
        {
            Console.WriteLine(update);
            var roomState = JsonSerializer.Deserialize<RoomState>(update);
            if (roomState != null)
            {
                if (roomState.Stage == "waitingForStart") continue; // ignore it, this is just for the server
                currentRoomState = roomState;
                if (roomState.Stage == "roundInProgress")
                {
                    currentView = GameView.InProgress;
                }
                else if (roomState.Stage == "finished")
                {
                    currentView = GameView.Results;
                }
                midRound = false;
                ResetButtonClasses();
                StateHasChanged();
            }
        }
    }

    private async Task ProcessPlayersUpdates()
    {
        await foreach (var update in playersUpdates.Reader.ReadAllAsync())
        {
            Console.WriteLine(update);
            var playersInfo = JsonSerializer.Deserialize<PlayersInfo>(update);
            if (playersInfo != null)
            {
                currentPlayersInfo = playersInfo;
                // determine if the current user is the host
                foreach (var (connectionId, player) in playersInfo.Players)
                {
                    if (connectionId == HubConnection.ConnectionId && player.IsHost)
                    {
                        isHost = true;
                        break;
                    }
                }
                StateHasChanged();
            }
        }
    }

    private async Task StartGame()
    {
        await HubConnection.InvokeAsync("StartGame", RoomCode);
    }

    private async Task SendAnswer(bool answer)
    {
        if (midRound) return;
        midRound = true;
        HighlightAnswer(answer);
        await HubConnection.InvokeAsync("SendAnswer", RoomCode, currentRoomState.CurrentRound.Id, answer ? "True"
        : "False");
    }

    private void HighlightAnswer(bool answer)
    {
        if (answer == currentRoomState.CurrentRound.RoundQuestion.Answer)
        {
            if (answer)
            {
                buttonTrueClass = "correct-answer";
            }
            else
            {
                buttonFalseClass = "correct-answer";
            }
        }
        else
        {
            if (answer)
            {
                buttonTrueClass = "wrong-answer";
            }
            else
            {
                buttonFalseClass = "wrong-answer";
            }
        }
    }

    private void ResetButtonClasses()
    {
        buttonTrueClass = "";
        buttonFalseClass = "";
    }
}