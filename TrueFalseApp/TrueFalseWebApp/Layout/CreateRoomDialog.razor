@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject IJSRuntime JS
@inject IConfiguration Configuration
@inject HttpClient Http

@using System.Text.Json
@using TrueFalseWebApp.Models

<MudDialog>
    <DialogContent>
        @if (isSettingUp)
        {
            <MudStack Class="align-center">
                <MudTextField @bind-Value="roundsNumber" Label="Number of rounds"
                    HelperText="How many rounds you want to play?" Variant="Variant.Outlined" />
                <MudTextField @bind-Value="roundTimeout" Label="Round timeout (seconds)"
                    HelperText="How long should each round last?" Variant="Variant.Outlined" />
                <MudButton Variant="Variant.Filled" Class="mud-theme-primary" OnClick="CreateRoom">
                    Create
                </MudButton>
            </MudStack>
        }
        else
        {
            @if (string.IsNullOrEmpty(roomCode))
            {
                <MudStack Class="align-center">
                    <MudProgressCircular Indeterminate="true" Color="Color.Primary" Size="Size.Large" Class="my-4" />
                    <MudText Typo="Typo.subtitle2">Creating your room...</MudText>
                </MudStack>
            }
            else
            {
                <MudText Typo="Typo.subtitle1" Class="text-center m-4"><strong>Game created!</strong></MudText>
                <MudStack Row="true" Class="align-center mb-4" Justify="Justify.SpaceBetween">
                    <MudText Typo="Typo.subtitle2">Room code: <strong>@roomCode</strong></MudText>
                    <MudIconButton Icon="@Icons.Material.Filled.ContentCopy" Color="Color.Primary"
                        OnClick="(() => CopyToClipboard(roomCode))" />
                </MudStack>
                <MudStack Row="true" Class="align-center mb-4">
                    <MudText Typo="Typo.subtitle2">Invitation link: <strong>@GetInviteLink()</strong></MudText>
                    <MudIconButton Icon="@Icons.Material.Filled.ContentCopy" Color="Color.Primary"
                        OnClick="(() => CopyToClipboard(GetInviteLink()))" />
                </MudStack>
            }
        }
    </DialogContent>
    <DialogActions>
        @if (!string.IsNullOrEmpty(roomCode) && !isSettingUp)
        {
            <MudContainer Class="d-flex align-center justify-center">
                <MudButton Color="Color.Primary" OnClick="@(() => Navigation.NavigateTo($"/multiplayer/{roomCode}"))">Join
                </MudButton>
            </MudContainer>
        }
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }
    private bool isSettingUp = true;
    private string roomCode = "";
    private int roundsNumber = 10;
    private int roundTimeout = 15;

    private void Cancel() => MudDialog.Cancel();

    private string GetInviteLink()
    {
        // Logic to generate invite link
        string baseUrl = Configuration["Telegram:MiniAppUrl"];
        return $"{baseUrl}?startapp={roomCode}";
    }

    private async Task CopyToClipboard(string text)
    {
        await JS.InvokeVoidAsync("navigator.clipboard.writeText", text);
    }

    private async Task CreateRoom()
    {
        isSettingUp = false;
        StateHasChanged();
        try
        {
            ApiResponse<string>? response = await
            Http.GetFromJsonAsync<ApiResponse<string>>($"createRoom?roundsNum={roundsNumber}&roundTimeout={roundTimeout}");
            if (response == null || !response.Ok || string.IsNullOrEmpty(response.Content))
            {
                string errorMessage = response?.Message ?? "Unknown error occurred while creating the room.";
                Snackbar.Add($"Error creating room: {errorMessage}", Severity.Error);
                MudDialog.Close();
                return;
            }
            roomCode = response.Content;


        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add($"Error creating room: {ex.Message}", Severity.Error);
            MudDialog.Close();
        }
        catch (JsonException ex)
        {
            Snackbar.Add($"Error parsing server response: {ex.Message}", Severity.Error);
            MudDialog.Close();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Unexpected error: {ex.Message}", Severity.Error);
            MudDialog.Close();
        }
    }
}